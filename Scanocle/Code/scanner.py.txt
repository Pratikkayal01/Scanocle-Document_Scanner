# -*- coding: utf-8 -*-
"""
Created on Tue Jul 14 21:35:23 2020

@author: Pratik Kayal
"""



from __future__ import division
import numpy as np
import cv2
import imutils
import img2pdf
from PIL import Image
import os
import imutils
from param_config import config
import shutil
import datetime
import time
from task_logging import task_logging

class scanner():

    def __init__(self):
        value_p = True


    def order_points(self,pts):
        rect = np.zeros((4, 2), dtype = "float32")
        s = pts.sum(axis = 1)
        rect[0] = pts[np.argmin(s)]
        rect[2] = pts[np.argmax(s)]
        diff = np.diff(pts, axis = 1)
        rect[1] = pts[np.argmin(diff)]
        rect[3] = pts[np.argmax(diff)]
        return rect

    def four_point_transform(self,image, pts):
        rect = self.order_points(pts)
        (tl, tr, br, bl) = rect
        widthA = np.sqrt(((br[0] - bl[0]) ** 2) + ((br[1] - bl[1]) ** 2))
        widthB = np.sqrt(((tr[0] - tl[0]) ** 2) + ((tr[1] - tl[1]) ** 2))
        maxWidth = max(int(widthA), int(widthB))
        heightA = np.sqrt(((tr[0] - br[0]) ** 2) + ((tr[1] - br[1]) ** 2))
        heightB = np.sqrt(((tl[0] - bl[0]) ** 2) + ((tl[1] - bl[1]) ** 2))
        maxHeight = max(int(heightA), int(heightB))
        dst = np.array([
            [0, 0],
            [maxWidth - 1, 0],
            [maxWidth - 1, maxHeight - 1],
            [0, maxHeight - 1]], dtype = "float32")
        # compute the perspective transform matrix and then apply it
        M = cv2.getPerspectiveTransform(rect, dst)
        warped = cv2.warpPerspective(image, M, (maxWidth, maxHeight))
        # return the warped image
        return warped

    def image_2_PDF(self,img,pdf):

        #loading the imagefrom path
        image = Image.open(img)

        pdf_path = pdf
        pdf_bytes = img2pdf.convert(image.filename)

        file = open(pdf_path, "wb")
        file.write(pdf_bytes)
        image.close()
        file.close()

        # output
        print("Successfully made pdf file")


    def find(self,name):
        path = config.upload_folder
        for root, dirs, files in os.walk(path):
            if name in files:
                return 1
            else:
                return 0

    def image_scanning(self,filename):

        print('Scanning Process Start')

        start_time_scan = str(datetime.datetime.now().time())
        start_time = time.time()
        start_date = str(datetime.datetime.now().date())

        file_exists = self.find(filename)

        if file_exists == 1:


            try:

                img_path = config.upload_folder + filename

                image = cv2.imread(img_path)
                ratio = image.shape[0] / 500.0
                orig = image.copy()
                image = imutils.resize(image, height = 500)
                # convert the image to grayscale, blur it, and find edges
                # in the image
                gray_img = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
                gray_img = cv2.GaussianBlur(gray_img, (5, 5), 0)
                edged = cv2.Canny(gray_img, 75, 200)

                height, width = edged.shape[:2]
                #print(height, width)
                perimiter = 2*(height+width)
                #print(perimiter)


                counts = cv2.findContours(edged.copy(), cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
                counts = imutils.grab_contours(counts)
                counts = sorted(counts, key = cv2.contourArea, reverse = True)
                # loop over the contours
                for c in counts:
                    # approximate the contour
                    peri = cv2.arcLength(c, True)
                    point_no = cv2.approxPolyDP(c, 0.02 * peri, True)
                    # if our approximated contour has four points, then we
                    # can assume that we have found our screen

                    if len(point_no) == 4:
                        screenCount = point_no
                        break
                percent = (peri/perimiter)*100
                #print("Scanned Image Percent {}".format(percent))

                if percent>config.doc_percent:
                    cv2.drawContours(image, [point_no], -1, (0, 255, 0), 2)

                    point_no = point_no.reshape(4, 2) * ratio

                    croped = self.four_point_transform(orig, point_no)
                    croped = cv2.cvtColor(croped, cv2.COLOR_BGR2GRAY)


                    if height>width:
                        warped_new = Image.fromarray(croped)
                        warped_new = warped_new.resize((900,1200),Image.ANTIALIAS)
                        temp_img_path = config.temp_folder + 'tmp_' + filename
                        warped_new.save(temp_img_path,quality=75)

                        os.remove(img_path)

                        scanned_filename = filename.split('_')[1]
                        scannedPath = config.predict_folder + str(scanned_filename) + '.pdf'

                        #cv2.imwrite(temp_img, warped)

                        self.image_2_PDF(temp_img_path,scannedPath)
                        os.remove(temp_img_path)

                    else:
                        warped_new = Image.fromarray(croped)
                        warped_new = warped_new.resize((1200,900),Image.ANTIALIAS)
                        temp_img_path = config.temp_folder + 'tmp_' + filename
                        warped_new.save(temp_img_path,quality=75)

                        os.remove(img_path)

                        scanned_filename = filename.split('_')[1]
                        scannedPath = config.predict_folder + str(scanned_filename) + '.pdf'

                        #cv2.imwrite(temp_img, warped)

                        self.image_2_PDF(temp_img_path,scannedPath)
                        os.remove(temp_img_path)


                else:
                    orig_new = cv2.cvtColor(orig, cv2.COLOR_BGR2GRAY)
                    orig_new = Image.fromarray(orig_new)
                    if height>width:
                        orig_new = orig_new.resize((900,1200),Image.ANTIALIAS)
                        temp_img_path = config.temp_folder + 'tmp_' + filename
                        orig_new.save(temp_img_path,quality=config.image_quality)

                        scanned_filename = filename.split('_')[1]
                        scannedPath = config.predict_folder + str(scanned_filename) + '.pdf'

                        self.image_2_PDF(temp_img_path,scannedPath)
                        os.remove(temp_img_path)

                        #print('Inside Else and IF')

                    else:
                        orig_new = orig_new.resize((1200,900),Image.ANTIALIAS)
                        temp_img_path = config.temp_folder + 'tmp_' + filename
                        orig_new.save(temp_img_path,quality=config.image_quality)

                        scanned_filename = filename.split('_')[1]
                        scannedPath = config.predict_folder + str(scanned_filename) + '.pdf'

                        self.image_2_PDF(temp_img_path,scannedPath)
                        os.remove(temp_img_path)
                        #print('Inside Else and Else')

                success_str = 'Success_' + str(scanned_filename)
                elapsed_time = time.time() - start_time
                logging = [start_date,'scanning_Process',start_time_scan,str(datetime.datetime.now()),(elapsed_time*1000),success_str]
                task_logging(logging)
                print('scanning Done for the ID {} and time consumed {} ms'.format(scanned_filename,(elapsed_time*1000)))



            except:

                base_dir = config.base_dir + 'error.pdf'

                err_fileName = filename.split('_')[1]
                dest_folder = config.temp_folder + 'error_' + str(err_fileName)+'.pdf'

                shutil.copy(base_dir,dest_folder)
        else:
            base_dir = config.base_dir + 'error.pdf'

            err_fileName = filename.split('_')[1]
            dest_folder = config.temp_folder + 'error_' + str(err_fileName)+'.pdf'

            shutil.move(base_dir,dest_folder)

scanner_cl = scanner()
#scanner_cl.image_scanning('img_1234_pdf.jpeg')
